#
# @brief
# This file is part of the MeetiX Operating System.
# Copyright (c) 2017-2021, Marco Cicognani (marco.cicognani@meetixos.org)
#
# @developers
# Marco Cicognani (marco.cicognani@meetixos.org)
#
# @license
# GNU General Public License version 3
#

list(APPEND CMAKE_MODULE_PATH "@SOURCE_DIR@/Meta/CMake")

#
# System name and architecture
#
set(CMAKE_SYSTEM_NAME "MeetixOS")
set(CMAKE_SYSTEM_PROCESSOR "i686")

#
# Toolchain install directories
#
set(TOOLCHAIN_TRIPLET i686-pc-meetix)
set(TOOLCHAIN_ROOT "@SOURCE_DIR@/Toolchain/Local")
set(TOOLCHAIN_BIN "${TOOLCHAIN_ROOT}/bin")
set(TOOLCHAIN_INCLUDE ${TOOLCHAIN_ROOT}/include)
set(TOOLCHAIN_LIB ${TOOLCHAIN_ROOT}/lib)

#
# Toolchain paths
#
set(CMAKE_C_COMPILER "${TOOLCHAIN_BIN}/i686-pc-meetix-gcc")
set(CMAKE_CXX_COMPILER "${TOOLCHAIN_BIN}/i686-pc-meetix-g++")
set(CMAKE_ASM_COMPILER "${TOOLCHAIN_BIN}/i686-pc-meetix-gcc")
set(CMAKE_LINKER "${TOOLCHAIN_BIN}/i686-pc-meetix-ld")
set(CMAKE_RANLIB "${TOOLCHAIN_BIN}/i686-pc-meetix-gcc-ranlib")
set(CMAKE_STRIP "${TOOLCHAIN_BIN}/i686-pc-meetix-strip")
set(CMAKE_AR "${TOOLCHAIN_BIN}/i686-pc-meetix-gcc-ar")
set(CMAKE_OBJCOPY "${TOOLCHAIN_BIN}/i686-pc-meetix-objcopy")
set(CMAKE_CXXFILT "${TOOLCHAIN_BIN}/i686-pc-meetix-c++filt")
set(CMAKE_ASM_NASM_COMPILER "nasm")
set(CMAKE_ASM_NASM_COMPILE_OBJECT "${CMAKE_ASM_NASM_COMPILER} -f elf -o <OBJECT> -s <SOURCE>")

#
# C/C++ Flags
#
add_compile_options(-m32)
add_compile_options(-nostdinc) # See following include_directories() for explanation
add_compile_options(-Wdouble-promotion)
add_compile_options(-Wno-unknown-pragmas)
add_compile_options(-fdiagnostics-color=always)
add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Werror>)
add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Wno-literal-suffix>)
add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fconcepts-diagnostics-depth=10>)
add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>)
add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-fno-rtti>)

#
# NOTE to avoid to copy library headers into ${TOOLCHAIN_INCLUDE} -nostdinc is passed to the compiler and the default
# include paths (both for C and C++) are passed explicitly as -isystem via command line.
#
# This ensures that #include_next directives doesn't search into ${TOOLCHAIN_INCLUDE} (which is reserved for ported
# library installations) but into ${CMAKE_SOURCE_DIR}/Libs
#

include_directories(SYSTEM ${TOOLCHAIN_ROOT}/i686-pc-meetix/include)
include_directories(SYSTEM ${TOOLCHAIN_ROOT}/i686-pc-meetix/include/c++/11.2.0)
include_directories(SYSTEM ${TOOLCHAIN_ROOT}/i686-pc-meetix/include/c++/11.2.0/i686-pc-meetix)
include_directories(SYSTEM ${TOOLCHAIN_ROOT}/i686-pc-meetix/include/c++/11.2.0/backward)

include_directories(SYSTEM ${TOOLCHAIN_LIB}/gcc/i686-pc-meetix/11.2.0/include)
include_directories(SYSTEM ${TOOLCHAIN_LIB}/gcc/i686-pc-meetix/11.2.0/include-fixed)

#
# AFTER is fundamental since #include_next watches into the last system include directories
#

include_directories(AFTER SYSTEM "${TOOLCHAIN_INCLUDE}")
include_directories(AFTER SYSTEM "${CMAKE_SOURCE_DIR}") # ST library
include_directories(AFTER SYSTEM "${CMAKE_SOURCE_DIR}/Libs")
include_directories(AFTER SYSTEM "${CMAKE_SOURCE_DIR}/Libs/LibMath")
include_directories(AFTER SYSTEM "${CMAKE_SOURCE_DIR}/Libs/LibApi")
include_directories(AFTER SYSTEM "${CMAKE_SOURCE_DIR}/Libs/LibC")

#
# C/C++ Release Flags
# TODO Since there is a bug into the kernel which cause a QEMU crash when compiled with something that is not -O0
#
set(CMAKE_CXX_FLAGS_RELEASE "-g0 -s")
set(CMAKE_C_FLAGS_RELEASE "-g0 -s")

if ("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    add_compile_definitions(NDEBUG)
endif ()

#
# Since there are custom dependencies between the libraries we cannot link a program
#
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(CMAKE_STAGING_PREFIX "${CMAKE_BINARY_DIR}/Image/Root")
set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/Image/Root")
set(CMAKE_INSTALL_DATAROOTDIR "${CMAKE_BINARY_DIR}/Image/Root")

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)
